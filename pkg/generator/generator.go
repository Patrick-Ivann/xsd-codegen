package generator

import (
	"bytes"
	"fmt"
	"os"
	"strings"
	"text/template"

	"github.com/Patrick-Ivann/xsd-codegen/pkg/model"
)

// GenerateGoCode generates Go structs from the schema model and writes them to the output file.
func GenerateGoCode(schema *model.Schema, tmplPath, outputPath string) error {
	tmplBytes, err := os.ReadFile(tmplPath)
	if err != nil {
		return fmt.Errorf("failed to read template: %w", err)
	}
	tmpl, err := template.New("struct").Funcs(template.FuncMap{
		"restrictionTag": restrictionTag,
		"goType": func(typ string, max int) string {
			return XSDToGoType(typ, max)
		},
		"title": Title,
		"omit":  omitTag,
	}).Parse(string(tmplBytes))
	if err != nil {
		return fmt.Errorf("failed to parse template: %w", err)
	}
	var buf bytes.Buffer
	// Write header once
	buf.WriteString("// Code generated by xsd-codegen; DO NOT EDIT.\n\n")
	buf.WriteString("package yourpackage\n\n")
	buf.WriteString("import (\n    \"encoding/xml\"\n)\n\n")
	for _, t := range schema.Types {
		err := tmpl.Execute(&buf, t)
		if err != nil {
			return fmt.Errorf("failed to execute template: %w", err)
		}
		buf.WriteString("\n")
	}
	if err := os.WriteFile(outputPath, buf.Bytes(), 0644); err != nil {
		return fmt.Errorf("failed to write output: %w", err)
	}
	return nil
}

// restrictionTag generates a struct tag string for XSD restrictions.
func restrictionTag(r *model.Restriction) string {
	if r == nil {
		return ""
	}
	var parts []string

	// Length constraint
	if r.Length != nil {
		parts = append(parts, fmt.Sprintf("len=%d", *r.Length))
	} else {
		if r.MinLength != nil {
			parts = append(parts, fmt.Sprintf("min=%d", *r.MinLength))
		}
		if r.MaxLength != nil {
			parts = append(parts, fmt.Sprintf("max=%d", *r.MaxLength))
		}
	}

	// Pattern (regular expression)
	if r.Pattern != nil {
		escaped := model.EscapeQuotes(*r.Pattern)
		parts = append(parts, fmt.Sprintf("regexp=%q", escaped))
	}

	// Enumeration values (joined as alternates)
	if len(r.Enumeration) > 0 {
		quotedEnums := make([]string, len(r.Enumeration))
		for i, val := range r.Enumeration {
			quotedEnums[i] = fmt.Sprintf("%q", val)
		}
		enumExpr := strings.Join(quotedEnums, ",")
		parts = append(parts, fmt.Sprintf("oneof=%s", enumExpr))
	}

	// Numeric boundaries
	if r.MinInclusive != nil {
		parts = append(parts, fmt.Sprintf("min=%s", *r.MinInclusive))
	}
	if r.MaxInclusive != nil {
		parts = append(parts, fmt.Sprintf("max=%s", *r.MaxInclusive))
	}
	if r.MinExclusive != nil {
		parts = append(parts, fmt.Sprintf("gt=%s", *r.MinExclusive))
	}
	if r.MaxExclusive != nil {
		parts = append(parts, fmt.Sprintf("lt=%s", *r.MaxExclusive))
	}

	// Digits
	if r.TotalDigits != nil {
		parts = append(parts, fmt.Sprintf("digits=%d", *r.TotalDigits))
	}
	if r.FractionDigits != nil {
		parts = append(parts, fmt.Sprintf("decimals=%d", *r.FractionDigits))
	}

	if len(parts) == 0 {
		return ""
	}
	return fmt.Sprintf(" validate:\"%s\"", strings.Join(parts, ","))
}
